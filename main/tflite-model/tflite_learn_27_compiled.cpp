/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 08.10.2023 15:52:19

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 3440;
#else
constexpr int kTensorArenaSize = 2416;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,507 } };
const TfArray<1, float> quant0_scale = { 1, { 0.048418756574392319, } };
const TfArray<1, int> quant0_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 39, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 39, 1, 16, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 20, 16, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 20, 1, 32, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 320, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data6[4] = { 291, -98, -396, 370, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0001727093622321263, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[4*320] = { 
  1, 52, -60, 22, 26, -19, -34, 6, -19, 28, 6, -6, 14, -19, -76, 7, -26, 11, 22, 31, 15, 3, -27, -60, -2, 2, -49, 4, 21, -4, -20, 15, 6, 30, -45, 37, -20, 2, -46, 12, -20, 4, 19, 40, -10, 39, -24, 10, 17, -6, 4, 9, -18, -37, -11, -47, -12, 36, -42, -12, 9, -10, 17, 27, 54, 63, -94, 31, 5, 5, -21, 42, -53, 32, 15, 10, -37, 51, -13, 4, -67, 3, -48, 10, -29, -42, 24, -42, -4, 54, -13, 15, -6, -33, 0, 6, 17, 45, -71, 37, -50, 11, -11, 18, -50, 14, -13, 27, -74, 51, -45, 15, -127, -18, -34, 16, -12, -32, 23, 0, 11, 30, -11, 13, 24, -69, 2, 19, 35, 49, -51, 17, 16, -16, -20, -1, -27, 10, 0, 43, -50, 41, -18, 29, -93, 4, 7, 6, -24, 27, 32, 1, -6, 32, -15, -18, 25, -90, 21, 42, 33, 45, -38, 49, -33, -5, -23, -1, -57, 47, 10, 30, -58, 16, -21, -5, -61, 2, -27, -6, -31, 10, 16, 5, 24, 63, -46, -17, 68, -67, -3, 43, 47, 37, -35, 22, -14, -14, -44, 44, -46, 37, -4, 27, -43, 43, -43, 7, -65, -25, -40, -6, -25, -8, 6, -21, -23, 42, -38, -23, 26, -54, -7, 20, 38, 73, -64, 46, -13, -4, -39, -8, -32, 39, 18, 14, -54, 25, -34, 25, -84, 22, -26, -8, -38, -16, 12, -1, -17, 39, -29, -1, 37, -41, -7, 8, 11, 81, -49, 24, 16, 10, -13, -10, -30, 10, -14, 32, -52, 51, -59, -3, -48, -7, 8, 1, -4, -32, 30, -9, -29, 51, -30, -3, 21, -15, 18, 20, -4, 8, -42, 12, -16, -11, -7, -19, -6, 43, 14, 43, -64, 9, -86, 8, -66, -9, -17, -15, -54, -19, 21, 17, 31, 31, -92, -10, -7, 12, -32, 17, 
  17, -28, 18, -48, -1, -8, 58, 20, 28, -47, 35, 14, 46, 11, 45, -12, 42, -25, 19, 69, -15, -32, 53, -20, 15, 55, 55, 23, -40, 50, 2, -29, 0, 14, 17, -73, -16, -23, 19, 19, -42, -19, -19, -25, 47, -64, 3, -69, 24, -23, 67, 33, -23, 2, -35, -13, 28, -79, 43, 9, -58, 37, -9, -70, -60, -42, 6, -1, -58, -8, 45, 0, -8, -26, -2, -42, 24, -65, -2, -127, 8, -2, 36, 47, -71, -45, -67, 1, 39, -57, -2, -22, -33, 13, -17, -13, -40, -65, 21, -66, -8, -9, 13, -25, -51, 1, -41, -63, 61, -94, 33, -97, 10, -19, 40, 25, -71, -46, -63, -29, -38, -45, 32, 5, -57, 23, -26, -58, -23, -71, 13, -45, -26, -23, 41, -29, -55, -59, -44, -79, 21, -93, 3, -83, 1, -66, 19, 40, -69, -6, -59, -11, 17, -33, 2, 12, -35, 21, 19, -31, -23, -50, 23, -67, -20, -6, 48, -1, -30, -69, -60, -70, 41, -88, 19, -88, 20, -7, 28, 36, -58, -24, -54, 10, 6, -4, 11, 21, -35, 20, -20, -81, -22, 1, 20, -65, -13, -6, 33, -57, -19, -86, -65, -30, 6, -42, 2, -72, -3, -55, 20, 17, -71, -14, -41, -21, -7, -55, -5, -18, -47, 31, 5, -56, -9, -68, -6, -81, 24, -12, 22, -30, -20, -20, -34, 11, 6, -55, -20, -41, -2, 5, 58, 54, -41, 16, -19, -15, -39, -33, 7, -2, -31, -9, 6, -65, -12, -65, -27, -21, -41, -31, 32, -26, -44, -84, -57, -5, 22, -8, -10, -29, -5, -2, 42, 45, -40, 3, -16, -30, -18, -47, 22, 0, -17, -7, 15, -37, 17, -26, -24, -33, -32, -13, 5, 4, -34, -40, -56, 17, -2, 18, 5, -49, 31, 1, 39, 27, -6, -9, 18, -20, -118, 16, 8, -26, -17, -5, 7, -64, 
  -16, -13, 20, -14, -61, -18, -3, -4, 36, 5, -21, 12, -53, 12, 44, 14, 10, -48, -52, -18, -2, -10, -16, 2, -10, -67, 21, -2, -66, 0, 3, -21, 32, 2, 45, -17, -34, -19, 16, 5, 3, 20, 4, 16, -39, 27, 37, -13, 34, -17, -20, -8, 4, -10, 4, 20, -1, 36, 58, -26, -41, 4, -5, -8, 15, -28, 58, -38, -20, 2, 39, -17, -12, 0, 21, 20, 11, -1, 55, -2, 12, -51, -3, 22, 44, 1, 37, 19, -30, 18, 63, 10, -37, 7, 23, -63, 15, -15, 32, -24, -9, -17, 18, 18, 10, 11, 41, 14, 6, 16, 64, 26, 40, -44, -18, 5, 35, 8, 26, 6, 43, 15, 33, -17, -16, 2, 15, -44, 21, -21, 40, -33, -47, 7, 37, 27, -3, -8, 33, 23, 15, 1, 64, 30, 37, -37, -5, 21, 36, 6, 32, -8, -10, 22, 49, -10, -50, -9, 6, -44, -13, -27, 46, -15, 3, 6, 26, 55, -15, 8, 50, 31, 24, 8, 52, 14, 43, -15, -14, -19, 47, -20, 18, -52, -48, 8, 35, -8, -42, 38, -4, -46, 8, -15, 33, -17, 5, 14, 22, 40, 28, 23, 32, 20, 9, 12, 31, -1, 9, -37, -9, -3, 55, 3, 3, -17, 6, 20, 14, -18, -56, 16, 2, -15, -7, -3, 75, 3, -11, -3, 0, 19, -7, -8, 18, 5, 13, 3, 12, 8, 29, -11, -5, 8, 41, -1, 16, 12, -27, 16, -3, -1, -23, 2, -4, 0, 24, -26, 28, -61, -5, 6, 32, 36, -8, 42, 28, 27, 36, 8, 32, -17, 11, 13, 2, 13, 27, -6, 19, 10, 6, 18, 13, -16, -37, -17, -6, 1, -11, -13, 60, -39, -2, -21, -11, -5, -27, 28, -16, -11, 1, -32, 8, 8, 2, 6, -16, -8, 21, 10, 14, 24, 22, -35, 2, 1, 5, -1, -11, 11, 
  4, 9, -16, -9, 43, -18, -15, -37, -55, -34, 24, -3, -18, -19, -46, 14, -9, 37, -70, -53, 23, 18, -18, 29, 16, -18, -45, -20, 7, 2, -9, -8, -38, -67, -33, 1, 49, -8, -53, -51, 34, -57, -31, -34, -22, -50, -75, 27, -43, 62, -22, -35, 35, 41, -19, 17, 1, -62, -82, 1, 14, -32, -11, 19, -13, -41, 19, 28, 37, 18, -43, -53, 27, -6, -1, -42, -32, -29, -41, 10, 7, 49, -28, -50, 16, 50, -27, 24, 21, -6, -52, -22, 14, -16, -7, -2, -13, -42, 28, 41, 43, -12, -51, -54, 47, 20, -10, -53, -55, -80, -26, 23, 41, 46, -46, -32, 30, 18, -19, 21, -8, -72, -10, -7, 47, 23, 6, 37, -63, -27, -37, 28, 30, 7, -31, -47, 79, 51, -2, -62, -21, -80, -76, 31, 57, 39, -13, 3, 22, 57, -55, 33, 5, -94, -32, -6, 27, -1, -14, 25, -83, -13, -17, 19, 32, 10, -44, -61, 54, 1, 4, -84, 0, -87, 22, 33, 26, 40, -25, -51, 22, 50, -29, 38, 12, -123, -5, 10, 64, 38, -20, 46, -80, -35, 6, -7, 9, 2, -51, -25, 46, -31, -16, -75, -20, -49, 2, 7, 39, 37, -12, -10, -3, 32, -24, 53, -15, -55, -36, -13, 23, 14, -15, -8, -113, -75, -36, 9, 5, -4, -27, -10, 44, -59, 21, -66, -11, -64, -8, 33, 28, 25, -14, -43, 8, 28, -41, 35, -1, -52, -7, 22, 25, 17, -11, 27, -30, 0, 17, 26, 53, 1, -94, -8, 53, -39, 11, -72, -7, -112, -38, 19, 27, -2, -37, -78, 4, 72, -23, 53, -18, -68, 18, -16, 60, -3, 15, 12, -48, 30, -15, 28, -33, -22, -4, 10, 26, -69, 28, -77, 21, -42, 22, 21, 0, -9, 6, -2, -13, 23, -34, 19, 9, -29, 62, 17, 51, 19, 18, 43, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 4,320 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0055752303451299667, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[32] = { 7, -551, -1843, -495, -1063, -1042, -1282, -2636, -132, 662, -1116, -340, -520, 402, -1473, -1672, -617, -901, -949, -1616, -2118, -184, -496, 586, -542, 207, -1420, -1001, -407, -107, -1237, -369, };
const TfArray<1, int> tensor_dimension8 = { 1, { 32 } };
const TfArray<32, float> quant8_scale = { 32, { 0.00016701518325135112, 0.00016573477478232235, 0.00018759531667456031, 0.00018674768216442317, 0.00013485873932950199, 8.1524936831556261e-05, 0.00016659573884680867, 0.00013629818568006158, 0.0001895864843390882, 0.00020694039994850755, 0.00014446873683482409, 0.00022359078866429627, 0.00019699810945894569, 0.00018009438645094633, 0.00024936234694905579, 0.00014651821402367204, 0.00017531547928228974, 0.00018007948528975248, 0.00015608564717695117, 0.00014577410183846951, 0.000192167644854635, 0.00015565461944788694, 0.00019168143626302481, 0.00017954256327357143, 0.00014124633162282407, 0.00021433955407701433, 0.00019648121087811887, 9.9361466709524393e-05, 0.00014530708722304553, 0.00014912795450072736, 0.0001095726402127184, 0.00014974555233493447, } };
const TfArray<32, int> quant8_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[32*1*3*16] = { 
  /* [0][0][][] */ -54,-18,-61,-42,0,-28,-36,27,-12,-10,76,1,-22,27,109,9, -79,-60,-112,3,-28,18,62,18,-127,-88,-2,-42,2,-105,-21,-31, 2,1,-62,16,20,-46,16,0,-49,-18,56,-28,26,-75,-41,-4, 
  /* [1][0][][] */ -103,12,-79,52,-91,-21,43,11,-127,5,-33,-19,-39,82,-117,-56, -36,-5,-85,30,-50,-3,-19,-25,-78,-6,62,-23,-20,16,5,-11, -16,-12,-77,-38,-44,-13,-19,-55,-55,-95,28,-54,1,-3,66,-100, 
  /* [2][0][][] */ -30,-44,-20,-25,-6,29,-34,-8,24,-43,-42,33,26,-127,-84,-32, 41,-16,-10,-101,-54,13,84,26,27,-59,-83,-102,18,-87,30,-3, -66,-109,17,-62,-59,-52,23,-12,-71,-72,-30,-23,7,-14,79,21, 
  /* [3][0][][] */ 29,49,37,-25,13,8,-88,-16,-2,-33,-15,-12,-29,-39,-53,-3, -17,-8,-18,21,20,14,-5,-11,-20,2,-29,-12,-83,-36,-80,-32, -30,-2,-21,37,-71,-41,105,-81,-40,27,-49,-47,-76,83,-127,12, 
  /* [4][0][][] */ -58,5,-3,-52,-20,46,-55,57,-59,21,-88,-109,-108,-45,-28,1, 48,7,25,-101,-18,11,21,7,-36,-83,13,14,-64,-58,-99,-83, 97,-107,-18,-57,-101,-68,127,-41,-53,68,97,17,-30,37,-45,-112, 
  /* [5][0][][] */ -87,20,-39,-56,-93,-52,43,-91,-74,25,-39,-89,-47,-27,20,-62, -127,-25,17,40,10,-24,-111,-3,20,-96,-87,-52,-13,-64,0,-3, -13,-94,-67,-42,-20,-63,52,-54,-80,-34,-38,84,-45,-87,-107,-65, 
  /* [6][0][][] */ 23,-17,-13,21,39,65,-110,38,-13,-35,-22,-30,-2,-27,-45,29, -34,-99,-15,-27,24,50,-64,38,45,33,-19,-45,106,-28,59,28, -127,-29,-61,-40,-32,-61,-25,-78,26,-24,29,-31,42,86,28,28, 
  /* [7][0][][] */ -100,-34,-6,-10,-76,-21,-7,61,65,-109,52,35,-85,14,74,47, -90,-13,-57,9,-41,-63,-48,-55,61,-7,-35,-55,-82,31,0,56, 29,-18,-92,39,-22,-73,88,1,-51,25,21,-127,-58,83,-122,6, 
  /* [8][0][][] */ -49,-89,58,-26,-127,-114,60,-120,30,33,-51,33,-66,20,18,1, -113,-56,63,-40,-75,-108,41,-14,-3,10,-39,46,-16,29,5,6, -19,-94,-15,-51,-12,-43,-56,-74,22,-100,-27,110,-4,-31,-66,11, 
  /* [9][0][][] */ -6,21,-60,-40,-6,-23,-1,-19,23,-56,-24,5,34,-72,-61,-45, -69,43,-25,-23,-51,48,-18,-75,-42,-49,38,12,-10,-22,-69,28, -23,13,5,-56,-30,54,-71,-127,13,-17,52,16,-46,-11,-53,-24, 
  /* [10][0][][] */ -36,-102,10,-18,-111,-127,-27,-84,-6,-30,-96,-44,-123,63,12,6, 40,10,27,26,-15,-33,31,-64,44,5,-70,-40,-120,54,61,-28, 56,-11,103,65,-26,-70,75,22,-48,-15,24,7,5,39,-112,32, 
  /* [11][0][][] */ -96,18,36,-45,-76,-15,19,-13,-39,-28,-2,-63,-25,46,37,10, -40,-36,-40,-48,-40,-20,-15,44,-59,-11,14,-74,-8,-25,21,-14, 0,-38,-61,10,11,-23,46,50,-78,-57,-10,-127,-18,-44,24,-43, 
  /* [12][0][][] */ -5,-104,3,18,-6,32,-53,-65,28,12,39,14,-42,49,-8,12, -11,-107,-17,-8,28,14,17,-55,42,-34,39,-62,-23,8,-33,14, 42,19,15,-36,-10,14,-3,-2,-28,17,65,26,-23,-42,-127,48, 
  /* [13][0][][] */ -35,-127,-93,18,-38,-86,-25,-48,24,79,97,-80,-23,94,29,-4, -47,-74,-66,28,-36,0,-4,-23,-66,-84,7,-26,-26,-41,35,-73, -33,-73,-67,-77,13,-95,21,29,-120,-82,-28,-77,-50,-68,16,-40, 
  /* [14][0][][] */ -11,-37,-38,-23,-40,-30,-15,56,71,-47,-81,21,26,-50,-31,35, -36,-27,-3,-56,-70,-22,-23,4,43,-13,-36,-21,-7,1,28,-4, -57,-98,36,-40,-59,-38,53,-18,27,7,4,-127,-47,52,28,-2, 
  /* [15][0][][] */ 20,67,-32,-62,-67,-68,57,-14,-53,7,-74,42,-77,-33,27,-46, 20,59,-38,-65,-33,-56,72,-4,-15,-3,-65,-6,-112,-7,9,-15, 35,-2,-11,-77,-127,-81,73,48,-12,46,-57,-24,-82,82,39,-16, 
  /* [16][0][][] */ -4,-68,-11,-114,-59,-54,-45,-60,77,-74,-74,11,32,41,-59,-47, -39,-112,4,-127,-60,-16,88,-62,45,2,21,5,32,-18,32,11, 10,-37,-64,-38,-51,-50,20,-4,33,25,35,66,-2,-55,-30,35, 
  /* [17][0][][] */ 46,62,42,-48,-28,6,10,23,-64,-53,-35,-60,-39,-72,-127,-67, 86,30,24,-54,7,-52,49,-47,-62,-17,9,37,-91,17,-73,-15, -14,-90,-62,-30,-20,-21,34,-76,-25,65,52,-72,-69,2,-2,2, 
  /* [18][0][][] */ -25,-97,-35,62,-4,43,-127,56,14,-45,-8,-28,89,-28,7,80, -16,-86,18,-43,-51,38,-18,-111,48,-1,85,-55,56,11,15,88, -2,-24,-10,-2,16,19,-48,89,16,-9,55,-15,0,1,-79,61, 
  /* [19][0][][] */ 20,-20,15,-4,-17,78,-86,30,-2,6,40,14,47,-18,-60,78, -66,-55,-20,-5,59,60,-43,16,-11,-51,8,-97,52,-22,-35,81, -85,-127,-19,25,19,-67,-86,5,-18,-16,101,-6,76,46,35,98, 
  /* [20][0][][] */ -13,-68,38,-127,-75,-71,45,-23,50,5,39,-27,-46,31,-26,-2, 48,-32,7,-19,-25,-53,35,-59,-26,31,-8,-70,-60,2,-57,41, 44,-48,18,73,-24,-94,42,-64,2,13,-36,-40,-56,0,-63,-13, 
  /* [21][0][][] */ -10,62,34,9,11,-33,-50,37,-61,16,-58,-49,8,-23,-58,-34, 34,6,32,-40,59,21,33,9,-93,-9,-1,-38,-40,-14,-77,-111, 61,5,14,-100,9,-123,127,-20,-45,70,7,-23,-47,-89,-30,-45, 
  /* [22][0][][] */ -100,23,-4,-73,-87,-21,0,22,33,-18,43,-13,-44,30,32,-13, -66,-31,-17,6,-40,-50,15,32,-40,-21,-7,-107,-25,2,4,48, -1,-12,-23,29,-54,-45,7,50,-101,36,10,-127,-28,54,31,-34, 
  /* [23][0][][] */ 2,-10,41,3,6,-41,-57,24,-63,-25,-47,-5,26,-56,-104,-80, -19,27,41,6,12,-13,-92,34,-127,1,-93,38,-90,-38,-36,-46, 4,1,17,-37,18,-67,103,-7,-74,8,22,-45,6,-56,-6,-93, 
  /* [24][0][][] */ -26,-29,-55,25,-127,-43,-35,-48,-23,-22,-7,-45,-60,-4,-70,-103, 56,-84,105,62,34,-81,-1,45,-81,-74,1,85,-74,-60,16,68, -4,-78,-62,-42,-114,-74,-37,-112,-53,-22,1,-9,-60,-11,-73,-29, 
  /* [25][0][][] */ -45,-31,-57,44,-30,-62,-28,-28,24,56,84,5,-13,42,45,-34, -45,-36,-77,11,-16,-37,-5,0,-16,-65,-25,-24,-44,-23,27,-12, -2,-9,-67,-48,-19,-35,21,33,-127,-74,-7,-21,-8,-121,5,-49, 
  /* [26][0][][] */ -56,-75,-15,-47,-88,-85,-36,72,50,-61,-54,45,52,12,-20,11, -90,-63,5,-69,-3,-49,8,-35,49,24,-42,-50,-6,-11,44,39, -19,-108,69,-35,-76,11,45,-52,21,-14,21,-127,-63,45,13,37, 
  /* [27][0][][] */ 8,8,-8,-68,-71,-34,-93,2,-49,22,-88,-48,28,-74,-77,-80, -7,-20,-64,-78,-69,-38,-70,-127,-71,39,-38,-49,-28,-14,-35,-30, -84,53,-17,16,-51,-18,-3,-70,-53,-15,-63,-68,21,-26,3,-20, 
  /* [28][0][][] */ 28,88,48,-38,1,-4,-74,10,-23,-29,-86,-57,-96,-48,-29,-40, 22,-18,-31,-10,-37,17,-2,-2,-110,-74,-8,31,-86,31,-127,-66, 21,-20,-62,-20,-102,-77,98,-70,3,86,19,-26,-70,79,-73,-20, 
  /* [29][0][][] */ -22,-80,35,-67,61,-23,-49,-104,20,-19,-16,69,46,-17,-55,49, 17,-110,37,-32,-8,-66,-10,37,65,20,-19,-27,59,-46,-24,-2, 46,-90,28,-64,14,-23,16,-14,51,-52,3,-14,9,-30,38,127, 
  /* [30][0][][] */ -22,-46,10,-71,14,-23,-29,-54,-97,24,-84,-65,-63,-56,30,-67, 5,-11,-30,-22,16,-72,-13,8,2,-60,32,-62,-73,-60,-80,-31, 22,-54,17,-3,32,-29,-43,-127,-10,-37,11,-31,14,-23,-50,8, 
  /* [31][0][][] */ 49,57,-9,49,-10,29,-63,-20,-49,-82,-55,-38,-60,-46,-77,-64, -29,22,5,47,-46,-62,52,-63,-110,-34,17,-8,-100,35,-127,-25, -74,-51,-66,8,-109,-35,58,-84,-41,74,25,-52,-53,68,8,18, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant9_scale = { 32, { 0.0044328505173325539, 0.0043988665565848351, 0.0049790805205702782, 0.0049565830267965794, 0.0035793671850115061, 0.0021638025064021349, 0.0044217179529368877, 0.0036175723653286695, 0.0050319293513894081, 0.0054925298318266869, 0.0038344317581504583, 0.0059344577603042126, 0.005228645633906126, 0.0047799935564398766, 0.0066184764727950096, 0.0038888282142579556, 0.0046531539410352707, 0.0047795982100069523, 0.0041427630931138992, 0.0038690783549100161, 0.0051004374399781227, 0.00413132319226861, 0.0050875325687229633, 0.0047653475776314735, 0.0037489039823412895, 0.0056889154948294163, 0.0052149263210594654, 0.0026372126303613186, 0.003856683149933815, 0.0039580948650836945, 0.0029082335531711578, 0.0039744870737195015, } };
const TfArray<32, int> quant9_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[16] = { -1625, 759, 88, -1655, -424, 183, -5898, -320, -863, -2418, 39, 370, -535, -2360, -1750, -1429, };
const TfArray<1, int> tensor_dimension10 = { 1, { 16 } };
const TfArray<16, float> quant10_scale = { 16, { 0.00016622626571916044, 0.00037346736644394696, 0.00021686629042960703, 0.00026756373699754477, 0.00019125099061056972, 0.00024030741769820452, 0.00015986374637577683, 0.00024120185116771609, 0.00036567740608006716, 0.00016853504348546267, 0.00041190171032212675, 0.00037815948599018157, 0.00043265093700028956, 0.00021408613247331232, 0.00020342406060080975, 0.00019748786871787161, } };
const TfArray<16, int> quant10_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[16*1*3*13] = { 
  /* [0][0][][] */ -127,45,56,62,-76,40,49,-89,13,-77,-35,-4,-9, -99,4,16,106,-5,-19,71,-59,-51,51,52,-8,118, -112,81,91,50,-29,-38,-62,34,65,-56,20,47,-22, 
  /* [1][0][][] */ -127,-43,-59,-12,6,-3,15,10,8,28,1,15,-12, -91,-57,-34,11,12,12,-13,16,-38,-10,0,7,-22, -68,-19,19,17,42,9,-1,-29,-9,26,6,2,-22, 
  /* [2][0][][] */ 42,3,-91,-44,-47,-7,8,72,-2,3,28,-36,-5, -104,58,-88,-33,53,10,16,49,19,45,-8,-3,31, -90,98,-33,127,54,31,-34,-60,-25,16,-49,-32,-28, 
  /* [3][0][][] */ -127,48,58,52,32,-1,-21,23,-36,23,23,16,34, 60,62,50,39,73,29,-28,-4,-59,-18,63,21,-60, -20,16,-21,19,48,22,-9,25,-44,-52,-40,-54,-5, 
  /* [4][0][][] */ 13,-58,-45,-12,82,-3,112,15,-50,-67,-103,-79,-118, -36,63,-2,15,16,-10,-127,-20,32,46,108,33,70, -108,-66,-19,24,27,42,66,-12,-88,-76,-18,51,30, 
  /* [5][0][][] */ -127,62,65,5,-34,-34,-4,14,-84,-21,-4,97,66, -19,-39,-108,-1,-33,-22,-33,-19,65,57,-18,-30,-40, -61,-95,13,55,29,77,-9,35,49,-35,-57,-30,13, 
  /* [6][0][][] */ 54,64,16,82,-27,-49,-14,2,-64,-28,-38,-3,22, 56,117,36,54,-69,-96,-8,-38,-18,-89,0,-8,-30, 127,108,-103,103,-46,-70,-19,62,-42,-24,-29,34,-17, 
  /* [7][0][][] */ -84,78,69,-65,-24,18,31,22,-37,-40,20,15,-27, -96,127,86,-47,3,4,14,-24,-48,-2,23,36,14, 11,-25,-87,-91,-18,-8,51,-16,42,-8,-54,3,-35, 
  /* [8][0][][] */ 14,-15,27,-21,13,14,-15,-16,18,21,-15,-17,-19, -60,-127,1,-19,2,35,4,38,9,-16,-24,13,16, 65,15,-13,44,44,-58,-59,34,26,5,13,29,-5, 
  /* [9][0][][] */ 11,98,79,96,-30,-82,-50,-51,-127,22,-1,26,-9, -13,-16,-122,82,18,-21,-27,37,33,19,7,-62,-69, 30,-91,-63,-55,109,-124,-7,18,45,42,-17,-49,-33, 
  /* [10][0][][] */ 127,-4,-9,55,21,5,8,16,17,17,-25,-17,16, -56,-37,-9,9,-47,-31,-15,-26,1,12,-18,-7,-11, -45,16,7,6,11,9,13,-25,-11,11,0,-6,-11, 
  /* [11][0][][] */ 10,-49,-2,-11,-35,-8,10,5,39,-25,16,-6,27, -33,-25,35,-1,36,18,34,12,12,8,0,9,21, -27,-127,75,-34,-20,25,-27,5,-8,30,-14,17,-11, 
  /* [12][0][][] */ -127,17,43,39,43,3,8,-13,2,-20,-26,-29,-14, 23,-37,-19,-61,-31,6,18,19,-18,0,25,2,4, 62,-9,-33,-13,12,-13,-15,9,27,11,15,-2,6, 
  /* [13][0][][] */ 78,107,-7,8,31,77,-41,51,-42,1,14,-97,-9, 60,61,32,-15,127,-54,-70,-27,12,-15,-38,-28,1, 71,-60,-87,104,54,4,-54,-11,12,14,-23,-62,25, 
  /* [14][0][][] */ 127,32,-63,-50,-38,57,51,-67,27,84,-19,-29,-23, 124,15,-59,-117,-5,49,2,-5,41,61,43,36,-22, 97,48,-53,-34,-28,7,21,-12,-26,-24,34,14,0, 
  /* [15][0][][] */ 45,127,-53,-46,-66,-48,-44,37,44,34,-27,81,37, 112,55,38,86,-10,-36,22,26,-21,-21,8,13,-9, -100,-125,-56,15,69,83,-15,-52,-90,-17,74,-32,-37, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 16,1,3,13 } };
const TfArray<16, float> quant11_scale = { 16, { 0.0034330964554101229, 0.0077132787555456161, 0.0044789728708565235, 0.005526034627109766, 0.0039499360136687756, 0.0049631060101091862, 0.0033016905654221773, 0.0049815787933766842, 0.0075523913837969303, 0.0034807799383997917, 0.0085070692002773285, 0.0078101856634020805, 0.0089356061071157455, 0.0044215535745024681, 0.0042013484053313732, 0.0040787472389638424, } };
const TfArray<16, int> quant11_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,39,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.048418756574392319, } };
const TfArray<1, int> quant12_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,39,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.037676699459552765, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,39,1,16 } };
const TfArray<1, float> quant14_scale = { 1, { 0.037676699459552765, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,20,1,16 } };
const TfArray<1, float> quant15_scale = { 1, { 0.037676699459552765, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,20,16 } };
const TfArray<1, float> quant16_scale = { 1, { 0.037676699459552765, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,20,32 } };
const TfArray<1, float> quant17_scale = { 1, { 0.030977977439761162, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,20,1,32 } };
const TfArray<1, float> quant18_scale = { 1, { 0.030977977439761162, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,10,1,32 } };
const TfArray<1, float> quant19_scale = { 1, { 0.030977977439761162, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,320 } };
const TfArray<1, float> quant20_scale = { 1, { 0.030977977439761162, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,4 } };
const TfArray<1, float> quant21_scale = { 1, { 0.14281050860881805, } };
const TfArray<1, int> quant21_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,4 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension0, 507, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 507, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 624, (TfLiteIntArray*)&tensor_dimension13, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 624, (TfLiteIntArray*)&tensor_dimension15, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension17, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension19, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension21, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_27_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_27_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteStatus tflite_learn_27_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_27_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_27_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
